import * as assert from 'assert';
import {Zx81BasicVars} from '../src/misc/zx81/zx81basicvars';


suite('Zx81BasicVars', () => {
	let basicVars: Zx81BasicVars;
	let bvAny;

	setup(() => {
		basicVars = new Zx81BasicVars();
		bvAny = basicVars as any;
	});

	test('getAllVariablesWithValues', () => {
		bvAny.basicVars.set('A', 1);
		bvAny.basicVarsAddress.set('A', 0x100);
		bvAny.basicVars.set('BC', 5);
		bvAny.basicVarsAddress.set('BC', 0x110);
		bvAny.basicVars.set('D(1,2)', 12);
		bvAny.basicVarsAddress.set('D(1,2)', 0x120);
		const vars = basicVars.getAllVariablesWithValues();
		assert.equal(vars.length, 3);
		assert.equal(vars[0], 'A=1 @0x0100');
		assert.equal(vars[1], 'BC=5 @0x0110');
		assert.equal(vars[2], 'D(1,2)=12 @0x0120');
	});

	test('getVariableValues', () => {
		bvAny.basicVars.set('X', 2);
		bvAny.basicVars.set('BC', 5);
		bvAny.basicVars.set('D(1,2)', 12);
		let vars = basicVars.getVariableValues([]);
		assert.equal(vars, '');
		vars = basicVars.getVariableValues(['A', 'X', 'D(1,2)']);
		assert.equal(vars, 'A=undefined, X=2, D(1,2)=12');
	});

	suite('parseBasicVars', () => {
		test('0b0110_0000 One letter number', () => {
			const data = new Uint8Array([0xf3, 0x88, 0x21, 0x00, 0x00, 0x00]);
			basicVars.parseBasicVars(data, 0x1000);
			const vars = basicVars.getAllVariablesWithValues();
			assert.equal(vars.length, 1);
			assert.equal(vars[0], 'N=161 @0x1001');
		});

		test('0b1110_0000 Variable in FOR-NEXT loop', () => {
			const data = new Uint8Array([0xf3, 0x88, 0x21, 0x00, 0x00, 0x00,
				0, 0, 0, 0, 0,
				0, 0, 0, 0, 0,
				0, 0
			]);
			basicVars.parseBasicVars(data, 0x1000);
			const vars = basicVars.getAllVariablesWithValues();
			assert.equal(vars.length, 1);
			assert.equal(vars[0], 'N=161 @0x1001');
		});

		test('2 numbers', () => {
			const data = new Uint8Array([0xf3, 0x88, 0x21, 0x00, 0x00, 0x00,
				0, 0, 0, 0, 0,
				0, 0, 0, 0, 0,
				0, 0,
				0xf2, 0x88, 0x21, 0x00, 0x00, 0x00
			]);
			basicVars.parseBasicVars(data, 0x1000);
			const vars = basicVars.getAllVariablesWithValues();
			assert.equal(vars.length, 2);
			assert.equal(vars[0], 'N=161 @0x1001');
			assert.equal(vars[1], 'M=161 @0x1007');
		});

		test('0b1010_0000 Multi-character number', () => {
			const data = new Uint8Array([0xB2, 0x24, 0x23 | 0b1000_0000, 0x88, 0x21, 0x00, 0x00, 0x00
			]);
			basicVars.parseBasicVars(data, 0x1000);
			const vars = basicVars.getAllVariablesWithValues();
			assert.equal(vars.length, 1);
			assert.equal(vars[0], 'M87=161 @0x1003');
		});

		test('0b1000_0000 Array of numbers', () => {
			// DIM C(10,2,3)
			const data = new Uint8Array([
				0x88, 0x33, 0x01, 0x03, 0x0a, 0x00, 0x02, 0x00,
				0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84,
				0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x85, 0x18, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x85, 0x68, 0x00, 0x00, 0x00,
			]);
			basicVars.parseBasicVars(data, 0x1000);
			assert.equal(basicVars.getVariableValues(['C(1,1,1)']), 'C(1,1,1)=0');
			assert.equal(basicVars.getVariableValues(['C(1,1,2)']), 'C(1,1,2)=10');
			assert.equal(basicVars.getVariableValues(['C(9,1,3)']), 'C(9,1,3)=19');
			assert.equal(basicVars.getVariableValues(['C(10,2,2)']), 'C(10,2,2)=0');
			assert.equal(basicVars.getVariableValues(['C(10,2,3)']), 'C(10,2,3)=29');
		});

		test('0b0100_0000 String', () => {
			const data = new Uint8Array([
				0x58, 0x13, 0x00, 0x38, 0x37, 0x28, 0x18, 0x34,
				0x38, 0x32, 0x34, 0x16, 0x31, 0x34, 0x26, 0x29,
				0x2a, 0x37, 0x1b, 0x27, 0x26, 0x38
			]);
			basicVars.parseBasicVars(data, 0x1000);
			const vars = basicVars.getAllVariablesWithValues();
			assert.equal(vars.length, 1);
			assert.equal(vars[0], 'S$="SRC/OSMO-LOADER.BAS" @0x1003');
		});

		test('0b1100_0000 Array of chars', () => {
			// DIM A$(4,2)
			const data = new Uint8Array([
				0xc6, 0x0d, 0x00, 0x02, 0x04, 0x00, 0x02, 0x00,
				0x26, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f
			]);
			basicVars.parseBasicVars(data, 0x1000);
			assert.equal(basicVars.getVariableValues(['A$(1,1)']), 'A$(1,1)="A"');
			assert.equal(basicVars.getVariableValues(['A$(1,2)']), 'A$(1,2)="B"');
			assert.equal(basicVars.getVariableValues(['A$(2,1)']), 'A$(2,1)=" "');
			assert.equal(basicVars.getVariableValues(['A$(4,2)']), 'A$(4,2)="Z"');
		});
	});
});
